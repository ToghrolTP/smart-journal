name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Simple changelog generation - you might want to use a tool like git-cliff
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Rusty Diary ${{ steps.get_version.outputs.VERSION }}
        body: |
          # Rusty Diary ${{ steps.get_version.outputs.VERSION }}

          ${{ steps.changelog.outputs.CHANGELOG }}

          ## Installation

          ### Download Binary
          Download the appropriate binary for your platform from the assets below.

          ### Using Cargo
          ```bash
          cargo install rusty_diary
          ```

          ### From Source
          ```bash
          git clone https://github.com/yourusername/rusty_diary.git
          cd rusty_diary
          git checkout ${{ steps.get_version.outputs.VERSION }}
          cargo install --path .
          ```

          ## Checksums
          See the `checksums.txt` file for SHA256 checksums of all binaries.
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}

  build:
    name: Build Release Binaries
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rusty_diary
            asset_name: rusty_diary-linux-x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: rusty_diary
            asset_name: rusty_diary-linux-x86_64-musl
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rusty_diary.exe
            asset_name: rusty_diary-windows-x86_64.exe
          - os: macOS-latest
            target: x86_64-apple-darwin
            artifact_name: rusty_diary
            asset_name: rusty_diary-macos-x86_64
          - os: macOS-latest
            target: aarch64-apple-darwin
            artifact_name: rusty_diary
            asset_name: rusty_diary-macos-aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install musl-tools (Linux musl)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get update && sudo apt-get install -y musl-tools

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Strip binary (Linux and macOS)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Create archive (Linux and macOS)
      if: matrix.os != 'windows-latest'
      run: |
        mkdir -p release
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/
        cp README.md LICENSE CONTRIBUTING.md config.example.toml release/
        cd release
        tar -czf ../${{ matrix.asset_name }}.tar.gz *
        cd ..
        rm -rf release

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        mkdir release
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/
        cp README.md LICENSE CONTRIBUTING.md config.example.toml release/
        cd release
        7z a ../${{ matrix.asset_name }}.zip *
        cd ..
        rmdir /s /q release

    - name: Generate checksum (Linux and macOS)
      if: matrix.os != 'windows-latest'
      run: |
        shasum -a 256 ${{ matrix.asset_name }}.tar.gz > ${{ matrix.asset_name }}.tar.gz.sha256

    - name: Generate checksum (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        certutil -hashfile ${{ matrix.asset_name }}.zip SHA256 > ${{ matrix.asset_name }}.zip.sha256

    - name: Upload Release Asset (Linux and macOS)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.tar.gz
        asset_name: ${{ matrix.asset_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.zip
        asset_name: ${{ matrix.asset_name }}.zip
        asset_content_type: application/zip

    - name: Upload Checksum (Linux and macOS)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.tar.gz.sha256
        asset_name: ${{ matrix.asset_name }}.tar.gz.sha256
        asset_content_type: text/plain

    - name: Upload Checksum (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.zip.sha256
        asset_name: ${{ matrix.asset_name }}.zip.sha256
        asset_content_type: text/plain

  publish-crates:
    name: Publish to crates.io
    needs: [create-release, build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-latest-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Publish to crates.io
      # Uncomment the following line and add CARGO_REGISTRY_TOKEN to your repository secrets
      # if: "!contains(github.ref, '-')" # Only publish stable releases, not pre-releases
      run: echo "Skipping crates.io publish - add CARGO_REGISTRY_TOKEN secret to enable"
      # run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  create-checksums:
    name: Create Checksums File
    needs: [create-release, build]
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create checksums file
      run: |
        echo "# SHA256 Checksums for Rusty Diary Release" > checksums.txt
        echo "" >> checksums.txt
        find . -name "*.sha256" -exec cat {} \; >> checksums.txt

    - name: Upload checksums file
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain
